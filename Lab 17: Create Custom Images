Objectives:
  - Design a Containerfile to build a custom image
  - Find existing Containerfiles to use as a starting point for custom image builds
  - Describe S2I alternative to Containerfiles

# Previous methods created containers, which you then modify the requirements of the app to run in it, then commit changes to an image, were only suitable for using or testing very specific changes; they do not follow best practices such as maintainability, automation of building, and repeatability
# Containerfiles (aka Dockerfiles) are easy to share, version control, reuse, and extend; can also extend child from parent images
# Existing Containerfiles may be trimmed by removing unused material or locked to a specific release; other advantages include adding runtime libraries and internal libraries to be shared as a single image layer by multiple images for different applications
# Sources for parent images or modification of Containerfiles: Docker Hub, Red Hat Software Collections Library (RHSCL or Software Collections)
# RHSCL packages do not replace or conflict with default RHEL packages due to standard release schedules that adhere to specific guidelines regarding environment stability
# All RHEL users can use RHSCL packages
# RHSCL Containerfiles are found in the official repo; CentOS Containerfiles can be found from GitHub; Quay is primarily used for team collaboration offered by CoreOS

# Source-to-Image (S2I) is an OpenShift Container Platform feature
# Implements a standardized image build process for common technologies from source code, allows devs to focus on code rather than Containerfiles
# Start a container from a high-quality base (builder) image with the necessary runtime and dependencies such as package managers and compilers, fetch code from Git and send to the container for app binary files building, then save the container as a new container image with runtime and binaries; an advantage over Containerfiles is that it creates smaller container images with fewer layers

# Create a working directory, which contains all the files necessary to build the image, but never use the root directory (/) for security reasons
# COPY is not able to copy a remote file using its URL; ADD copies files or folders from a local or remote source and adds them to the container file system (local files must be in working directory); if the source is a file system path, then it must be inside the working directory; if the source is a compressed file, then ADD decompresses the file to the destination folder (COPY does not); ADD and COPY has root as owner even if USER instruction is specified (have RUN instructions after the copy to change the owner if so)
# Always use a different USER than root
# If ENTRYPOINT is omitted, default is /bin/sh -c; ENTRYPOINT specifies the default command and parameters to execute when the image runs in a container (max one); CMD adds default arguments to ENTRYPOINT (max one)
# ENTRYPOINT parameter takes the place of CMD, but having separate ENTRYPOINT and CMD allows the CMD to be overwritable when the container starts; or have no ENTRYPOINT and only CMD parameters
# ENTRYPOINT and CMD should always use JSON array format (["", ""]) aka EXEC form, and not Shell form

# Have RUN instructions on one line to minimize image layers; use escape code if needed
# Use RUN after COPY to change ownership from root because COPY and RUN copies the files with root as owner
# If Dockerfile didn't build, first remove the errata image and rebuild a new one

podman build -t NAME:TAG DIR
# use -f for different working directory
podman build -t NAME:TAG -f DIR