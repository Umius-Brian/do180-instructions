Objectives:
  - Deploy and manage a persistent container using a shared volume
  - Start a second database using the shared volume and observe that the data is consistent between two containers
  - They should be on the same host directory to store the MySQL data

[student@workstation ~]$ lab manage-review start

# Create /home/student/local/mysql directory with correct SELinux context and permissions
# First, create the directory
[student@workstation ~]$ mkdir -pv /home/student/local/mysql
# Add SELinux context for the directory and its contents; this allows you to mount the directory in a running container
[student@workstation ~]$ sudo semanage fcontext -a \
> -t container_file_t '/home/student/local/mysql(/.*)?'
# Apply SELinux policy
[student@workstation ~]$ sudo restorecon -R /home/student/local/mysql
# Change owner of the directory to mysql user and mysql group for the container image; change ownership from root:root to 27:27
[student@workstation ~]$ podman unshare chown -Rv 27:27 /home/student/local/mysql

# Verify 
ls -Zd local/mysql/

# Deploy a MySQL container instance with the given name, run as daemon option, volume, container image, port forward address, environment variables
[student@workstation ~]$ podman login registry.redhat.io
[student@workstation ~]$ podman run --name mysql-1 -d \
> -v /home/student/local/mysql/data:/var/lib/mysql/data -p 13306:3306 \
> -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_DATABASE=items \
> -e MYSQL_ROOT_PASSWORD=r00tpa55 registry.redhat.io/rhel8/mysql-80:1
# Verify
[student@workstation ~]$ podman ps --format="{{.ID}} {{.Names}}"
# 6l6azfaa55x8   mysql-1

# Load items database with /home/student/DO180/labs/manage-review/db.sql script
[student@workstation ~]$ mysql -uuser1 -h 127.0.0.1 \
> -pmypa55 -P13306 items < /home/student/DO180/labs/manage-review/db.sql

# Verify items database was loaded
# Use -e {SQL_parameter} to execute a SQL instruction
[student@workstation ~]$ mysql --user1 -h 127.0.0.1 -pmypa55 \
> -P13306 items -e "SELECT * FROM Item"

# Need to lastly gracefully stop the container because a new container will be created using the shared volume for database data, which can corrupt the database when two containers share the same volume
[student@workstation ~]$ podman stop mysql-1 

# Create a new container with the given
[student@workstation ~]$ podman run --name mysql-2 -d \
> -v /home/student/local/mysql:/var/lib/mysql/data -p 13306:3306 \
> -e MYSQL_USER=user1 -e MYSQL_PASSWORD:mypa55 -e MYSQL_DATABASE=items \
> -e MYSQL_ROOT_PASSWORD=r00tpa55 registry.redhat.io/rhel8/mysql-80:1

# Verify
[student@workstation ~]$ podman ps --format="{{.ID}} {{.Names}}"

# Save list of containers (including stopped ones) to /tmp/my-containers file
[student@workstation ~]$ podman ps -a > /tmp/my-containers

# Access Bash shell inside container and verify items database and Item table are available and with data
# Access Bash shell inside container
[student@workstation ~]$ podman exec -it /bin/bash
# Connect to MySQL server
bash-4.4$ mysql -uroot
# List all databases and confirm items database is there
mysql> show databases;
# List all tables from items database and verify that Item table is there
mysql> use items;
mysql> show tables;
# View the data from Item table
mysql> SELECT * FROM Item;
# Exit from MySQL client and container shell
mysql> exit
bash-4.4$ exit

# Use port forwarding to insert a new row into Item table with a 'description' value of 'Finished lab' and 'done' value of '1'
# Connect to MySQL database
[student@workstation ~]$ mysql -uuser1 -h workstation.lab.example.com \
> -pmypa55 -P13306 items
# mysql>
# Insert the new row
mysql> insert into Item (description, done) values ('Finished lab', 1);
# Exit from MySQL client
mysql> exit

# Because the first container isn't required anymore, remove it to release resources
[student@workstation ~]$ podman rm mysql-1

[student@workstation ~]$ lab manage-review grade
[student@workstation ~]$ lab manage-review finish

