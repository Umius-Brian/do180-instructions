Objectives:
  - Manage lifecycle of container image
  - Search for and pull images from remote (certified and alternative) registries
  - Export, import, and manage container images locally and in a registry
  - Manage tagged images

# To configure image registry for Podman, must use /etc/containers/registries.conf
# Use FDQN and port number to identify a registry; if no port specified, default port 5000 is given
# FDQN:PORT
[registries.search]
registries = ["registry.access.redhat.com", "quay.io"]

# Secure connections to a registry require a trusted certificate
# To support insecure connections, add the registry name to /etc/containers/registries.conf
[registries.insecure]
registries = ['localhost:5000']

# Images can be searched via Podman
[user@host ~]$ podman search [OPTIONS] <term>
# --limit <number> = limits the number of listed images per registry
# --filter <filter=value> = filters output based on condition (i.e. stars=<number>, is-automated=<true|false>, is-official=<true|false>)
# --tls-verify <true|false> = enables or disables HTTPS certificate validation for all used registries
# --list-tags = lists all available tags in the repo for the image

# Or via API
# To list all repos in a registry, use /v2/_catalog endpoint; n parameter limits the number of repos returned
[user@host ~]$ curl -Ls https://myserver/v2/_catalog?n=3
# {"repositories":["centos/httpd","do180/custom-httpd","hello-openshift"]}

# Able to format JSON if Python is available
[user@host ~]$ curl -Ls https://myserver/v2/_catalog?n=3 \
> | python -m json.tool
{
 "repositories": [
   "centos/httpd",
   "do180/custom-httpd",
   "hello-openshift"
 ]
}

# To provide all tags for a single image, use /v2/<name>/tags/list
# Note that Quay uses a different API to interact with repos
[user@host ~]$ curl -Ls \
> https://quay.io/v2/redhattraining/httpd-parent/tags/list \
> | python -m json.tool
{
    "name": "redhattraining/httpd-parent",
    "tags": [
        "latest",
        "2.4"
    ]
}

# Some registries require access authorization
[user@host ~]$ podman login -u username \
> -p password registry.access.redhat.com

# Registry HTTP API requires authentication credentials, use Red Hat SSO service to obtain an access token
[user@host ~]$ curl -u username:password -Ls \
> "https://sso.redhat.com/auth/realms/rhcc/protocol/redhat-docker-v2/auth?service=docker-registry"
# {"token":"eyJh...o5G8",
# "access_token":"eyJh...mgL4",
# "expires_in":...output omitted...}[user@host ~]$

# Include this token in a Bearer authorization header in subsequent requests
[user@host ~]$ curl -H "Authorization: Bearer eyJh...mgL4" \
>  -Ls https://registry.redhat.io/v2/rhel8/mysql-80/tags/list \
>  | python -mjson.tool
{
  "name": "rhel8/mysql-80",
    "tags": [
      "1.0",
      "1.2",
...output omitted...

# To pull images
# If image name does not include a registry, Podman searches /etc/containers/registries.conf
# Pull only downloads the image and won't start the container (can be used to update an image locally)
[user@host ~]$ podman pull [OPTIONS] [REGISTRY[:PORT]/]NAME[:TAG]
[user@host ~]$ podman pull quay.io/bitnami/nginx

# Podman stores images locally in /var/lib/containers/storage/overlay-images directory

# To list all images stored locally
[user@host ~]$ podman images

[user@host ~]$ podman pull registry.redhat.io/rhel8/mysql-80:1
[user@host ~]$ podman run registry.redhat.io/rhel8/mysql-80:1