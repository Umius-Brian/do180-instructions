Objectives:
  - Identify and solve problems during the build and deployment process

[student@workstation ~]$ lab troubleshoot-s2i start

# Load the classroom environment configuration
[student@workstation ~]$ source /usr/local/etc/ocp4.config

# Enter the local clone of the git repo and checkout master branch to ensure a good state
[student@workstation ~]$ cd ~/DO180-apps
[student@workstation DO180-apps]$ git checkout master

# Create a new brnanch to save changes made
[student@workstation DO180-apps]$ git checkout -b troubleshoot-s2i
[student@workstation DO180-apps]$ git push -u origin troubleshoot-s2i

# Login (missing API?)
[student@workstation DO180-apps]$ oc login -u "${RHT_OCP4_DEV_USER}" \
> -p "${RHT_OCP4_DEV_PASSWORD}"

# Create a new project named youruser-nodejs
[student@workstation DO180-apps]$ oc new-project ${RHT_OCP4_DEV_USER}-nodejs

# Build a Node app using the Hello World image located at https://github.com/yourgituser/DO180-apps in the nodejs-helloworld directory

# Run the oc new-app command provided in the ~/DO180/labs/troubleshoot-s2i/command.txt file
# -i option indicates the builder image to use (nodejs:12) from the image stream
# --context-dir option defines which folder inside the project contains the source code on which the app will build
# --build-env option defines an env variable to the builder pod (npm_config_registry env variable) so that it can reach the NPM registry
[student@workstation DO180-apps]$ oc new-app \
> --context-dir=nodejs-helloworld \
> https://github.com/${RHT_OCP4_GITHUB_USER}/DO180-apps#troubleshoot-s2i \
> -i nodejs:12 --name nodejs-hello --build-env \
> npm_config_registry=http://${RHT_OCP4_NEXUS_SERVER}/repository/npm-proxy

# Monitor the build process
[student@workstation DO180-apps]$ oc get pods -w
# There is an error
# Ctrl+C

# Build errors are usually consequences of syntax errors in the source code or missing dependencies
# Next step is to evaluate the raised errors of the build process

# Build step is triggered by bc created by OpenShift when S2I starts
# By default, OpenShift process creates a BuildConfig named nodejs-hello, responsible for triggering the build process
[student@workstation DO180-apps]$ oc logs bc/nodejs-hello
# We find that there is no compatible version for express

# Update the build process

# Fix the package.json by opening ~/DO180-apps/nodejs-helloworld/package.json file in your editor
# We find that Express is the wrong version, update it accordingly in the package.json

# Commit and push to the project
[student@workstation DO180-apps]$ git commit -am 'Fixed Express release'
[student@workstation DO180-apps]$ git push

# Relaunch S2I process
 
# Restart build step
[student@workstation DO180-apps]$ oc start-build bc/nodejs-hello

# A new build pod is created, check the logs
[student@workstation DO180-apps]$ oc logs -f bc/nodejs-hello

# The build is successful now, however, it doesn't mean the application has started
# Evaluate the build process
[student@workstation DO180-apps]$ oc get pods
# It looks like the build process was successful, but the app is in error state (CrashLoopBackOff)
nodejs-hello-7b99966464-fw4r8   0/1     CrashLoopBackOff   1          18s

# Review the logs generated by the app pod
# In the case of a successful deployment, the command dumps the logs from the app pod
# If there is an error with the deployment, this command dumps the logs from the deployment pod
# If deployment pod doesn't show the error, check the app pod logs by running oc logs <pod_name_that_has_the_error>
[student@workstation DO180-apps]$ oc logs nodejs-hello-7b99966464-fw4r8
# Looks like the error is a missing script

# Fix by updating the app code in package.json by adding
"scripts": { "start": "node app.js" },

# Commit and push
[student@workstation DO180-apps]$ git commit -am 'Added start up script'
[student@workstation DO180-apps]$ git push

# Restart the build step
[student@workstation DO180-apps]$ oc start-build bc/nodejs-hello

# Evaluate the status of the build process
[student@workstation DO180-apps]$ oc get pods -w
# We find that the app is running and that the old pods are terminating

# Review the logs generated by the successfully running app pod
[student@workstation DO180-apps]$ oc logs nodejs-hello-<successful_app_id>
> nodejs-helloworld@1.0.0 start /opt/app-root/src
> node app.js
# Example app listening on port 8080!

# Test the app

# First expose it
[student@workstation DO180-apps]$ oc expose svc/nodejs-hello

# Retrieve the address associated with the app
[student@workstation DO180-apps]$ oc get route -o yaml

# Curl
[student@workstation DO180-apps]$ curl -w "\n" \
> http://nodejs-hello-${RHT_OCP4_DEV_USER}-nodejs.${RHT_OCP4_WILDCARD_DOMAIN}

[student@workstation DO180-apps]$ lab troubleshoot-s2i finish












