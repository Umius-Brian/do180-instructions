Objectives:
  - Use prebuilt container images to create and manage containerized services
  - Manage container lifecycle from creation to deletion
  - Save container app data to persistent storage
  - Use port forwarding to access container

# Podman allows you to run containers, run them in the background, execute new processes inside them, and provide them with resources (fs volumes, network)

# Podman run creates a new container from an image and begins a running process inside the container
# Podman run also creates a randomly generated unique ID and container name, unless specified with --name option (name must be unique, even among stopped containers)
# This container runs in the foreground non-interactively
[user@host ~]$ podman run registry.redhat.io/rhel8/httpd-4
[user@host ~]$ podman run --name my-httpd-container \
> registry.redhat.io/rhel8/httpd-24

# To list container ID and names for all actively running containers
[user@host ~]$ podman ps

# To run container detached as a daemon in the background, use -d option
# This returns container ID and allows you to run commands in the same terminal while container runs in the background
[user@host ~]$ podamn run --name my-httpd-container \
> -d registry.redhat.io/rhel8/httpd-24

# Container image specified command to run to start containerized process (aka entry point)
# Podman run command overrides the entry point by including command after image name (entry point command must be executable within image)
# The ls /tmp overrides httpd's entry point, so it does NOT start
[user@host ~]$ podman run registry.redhat.io/rhel8/httpd-24 ls /tmp

# To begin an bash interactive shell or process that requires user input in a registry.redhat.io/rhel8/httpd-24 container
[user@host ~]$ podman run -it registry.redhat.io/rhel8/httpd-24 /bin/bash

# Sometimes you need to enter additional commands after entry point (executing an interactive shell inside an already running container, running processes that update or display container files, starting new background processes inside the container)
# To start an additional process inside an already running container using the container ID
[user@host ~]$ podman exec 7ed6e671a600 cat /etc/hostname

# For Podman to remember last container ID or name, use -l option
[user@host ~]$ podman exec my-httpd-container cat /etc/hostname
7ed6e671a600
[user@host ~]$ podman exec -l cat /etc/hostname
7ed6e671a600

# Lifecycle includes creating, stopping, restarting, or removing containers; also examining status and metadata for debugging, updating, or reporting purposes

# List running containers
[user@host ~]$ podman ps

# Podman does not discard containers immediately, rather preserving for postmortem analysis
# Use -a option to list all containers, even stopped ones
[user@host ~]$ podman ps -a

# Stop a running container gracefully (sends SIGTERM signal, waits for after grace period, then sends SIGKILL)
# SIGTERM, once caught, can be interpreted or ignored by the process (almost identical to SIGINT)
# Use stop over kill usually
[user@host ~]$ podman stop my-httpd-container

# Kill command sends Unix signals to the main process inside container, Podman accepts either signal name or number
# If no signal is specified, it sends SIGKILL signal terminating the main process and container
# Refer to chart for different types of signals and their corresponding number
[user@host ~]$ podman kill my-httpd-container
# or
[user@host ~]$ podman kill -s SIGKILL my-httpd-container

# Restart a stopped container and creates a new one with the same container ID, reusing the stopped container state and file system
[user@host ~]$ podman restart my-httpd-container

# Removes a container from the host node and discard its state and file system (does not remove images)
# Clean up a terminated container
# Using rm -f is identical to kill and rm commands together, removes container even if it has not stopped
[user@host ~]$ podman rm my-httpd-container
# To auto-clean
[user@host ~]$ podman run --rm alpine echo hello
# To remove all containers
[user@host ~]$ podman rm -a
# Before deleting containers, all running containers must be in a stopped status
# To stop all containers
[user@host ~]$ podman stop -a

# Inspect, stop, kill, restart, and rm commands can use both container ID and container name










